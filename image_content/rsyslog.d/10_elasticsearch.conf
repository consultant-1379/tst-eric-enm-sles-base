

# This is the forwarding rule for logstash destination



# This is the forwarding rule for Elasticsearch destination
module(load="omelasticsearch") # for outputting to Elasticsearch
# this is for index names to be like: enm_logs-application-YYYY.MM.DD
template(name="enm_logs-opendj"
  type="list") {
    constant(value="enm_logs-opendj-")
    property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
    constant(value=".")
    property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
    constant(value=".")
    property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
}

# this is for formatting our syslog in JSON with @timestamp
template(name="es_json"
  type="list") {
    constant(value="{")
      constant(value="\"timestamp\":\"")           property(name="timereported" dateFormat="rfc3339")
      constant(value="\",\"host\":\"")             property(name="hostname")
      constant(value="\",\"program\":\"")          property(name="app-name" format="jsonr")
      constant(value="\",\"severity\":\"")         property(name="syslogseverity-text")
      constant(value="\",\"severity_code\":")      property(name="syslogseverity")
      constant(value=",\"facility\":\"")           property(name="syslogfacility-text")
      constant(value="\",\"facility_code\":")      property(name="syslogfacility")
      constant(value=",\"pri\":")                  property(name="pri")
      constant(value=",\"tag\":\"")                property(name="syslogtag" format="jsonr")
      constant(value="\",\"message\":\"")          property(name="msg" format="jsonr")
      constant(value="\",\"originator\":\"")       constant(value="enm-rsyslog")
    constant(value="\"}")
}



if ($programname == 'TOR_OPENDJ_LOG_AUDIT' or $programname == 'TOR_OPENDJ_LOG_ACCESS') then {
   # Log messages to Elasticsearch
   action(type="omelasticsearch"
       server="elasticsearch"
       template="es_json"
       searchIndex="enm_logs-opendj"
       dynSearchIndex="on"
       searchType="_doc"
       action.resumeinterval="10"
       bulkmode="on"
       queue.type="linkedlist"           # run asynchronously
       queue.filename="rsyslog_queue"    # queue files
       queue.checkpointinterval="100"
       queue.size="40000"
       queue.maxdiskspace="500m"         # space limit on disk
       queue.discardmark="10000"
       queue.discardseverity="4"         # Discard Warning, Notice, Informational and Debug
       queue.highwatermark="20000"
       queue.lowwatermark="14000"
       action.resumeretrycount="-1"      # infinite retries if host is down
       queue.saveonshutdown="on"         # save messages to disk on shutdown
       queue.timeoutenqueue="0"          # Immediately discard after 0ms if it can't be written
       queue.dequeuebatchsize="1024"
       queue.dequeueslowdown="1000")
       stop
} else {
    # log messages to Log-Transformer
    action(type="omfwd"
      Target="eric-log-transformer"
      Port="5025"
      Protocol="tcp"
      template="es_json"
      queue.type="linkedlist"           # run asynchronously
      queue.filename="rsyslog_queue_LT"    # queue files
      queue.checkpointinterval="100"
      queue.size="40000"
      queue.maxdiskspace="500m"         # space limit on disk
      queue.discardmark="10000"
      queue.discardseverity="4"         # Discard Warning, Notice, Informational and Debug
      queue.highwatermark="20000"
      queue.lowwatermark="14000"
      action.resumeretrycount="-1"      # infinite retries if host is down
      queue.saveonshutdown="on"         # save messages to disk on shutdown
      queue.timeoutenqueue="0"          # Immediately discard after 0ms if it can't be written
      queue.dequeuebatchsize="1024"
      queue.dequeueslowdown="1000"
    )
}

